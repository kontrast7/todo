{"version":3,"sources":["serviceWorker.ts","app/appReducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/todolists-api.ts","components/AddNewItem/AddNewItem.tsx","components/EditableSpan/EditableSpan.tsx","features/ToDoListsAll/ToDoList/Task/Task.tsx","utils/error-utils.ts","features/ToDoListsAll/tasks-reducer.ts","features/ToDoListsAll/ToDoList/Todolist.tsx","features/ToDoListsAll/todolists-reducer.ts","features/ToDoListsAll/ToDoListsAll.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","appReducerInitialState","errorText","requestStatus","isInitialized","setRequestStatus","status","type","setError","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","error","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","TaskStatuses","TaskPriorities","AddNewItem","memo","useState","inputValue","setInputValue","onAddNewTaskHandler","useCallback","trim","addNewItem","onInputChangeHandler","currentTarget","value","onInputKeyPressHandler","key","className","TextField","size","label","title","helperText","onKeyPress","onChange","IconButton","color","onClick","AddBox","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","toDoListsAPI","tdlID","put","todolistId","taskId","newTaskData","EditableSpan","edit","setEdit","setValue","onSetEditHandler","onFocusBlur","changeItemValue","onChangeValueHandler","onEnterKeyHandler","onBlur","autoFocus","onDoubleClick","Completed","Task","onChangeItemHandler","task","id","onRemoveTaskHandler","removeTask","changeStatusHandler","e","console","log","checked","changeStatus","New","entityStatus","Checkbox","Delete","handleServerAppError","messages","handleServerNetworkError","message","initialState","setTaskEntityStatus","setTasksAC","tasks","removeTaskAC","addNewTaskAC","taskData","changeTaskAC","newData","changeTask","taskID","getState","a","find","t","warn","currentTaskValues","description","priority","deadline","startDate","response","resultCode","Todolist","useEffect","items","tasksForRender","filterStatus","filter","map","removeToDoListHandler","removeToDoList","onAllFilterTasksHandler","filterTasks","onActiveFilterTasksHandler","onCompletedFilterTasksHandler","addNewTask","onChangeListName","Paper","heading","Button","style","margin","disabled","setEntityStatus","changeToDoListTitleAC","ToDoListsAll","toDoLists","isLoggedIn","login","tdls","toDoLostID","onChangeListNameHandler","listID","onChangeItemValueHandler","itemID","filterTasksHandler","toDoListID","removeTaskHandler","deleteTask","addNewTaskHandler","item","createTask","addNewListHandler","name","payload","padding","Grid","container","spacing","tdl","to","setIsLoggedInAC","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","handleBlur","touched","fontSize","FormControlLabel","control","AppWithUseReducer","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","fontWeight","marginLeft","LinearProgress","Container","path","exact","render","from","top","textAlign","CircularProgress","rootReducer","combineReducers","action","newState","forEach","ts","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.de5d5318.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWithUseState is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type AppReducerInitialStateType = {\n    errorText: null | string\n    requestStatus: RequestStatusType\n    isInitialized: boolean\n}\n\nexport const appReducerInitialState: AppReducerInitialStateType = {\n    errorText: null,\n    requestStatus: 'idle',\n    isInitialized: false,\n}\n\nexport const appReducer = (state: AppReducerInitialStateType = appReducerInitialState, action: AppActionsType)\n    : AppReducerInitialStateType => {\n    switch (action.type) {\n        case \"SET-REQUEST-STATUS\":\n            return { ...state, requestStatus: action.status }\n        case \"SET-APP-ERROR\":\n            return { ...state, errorText: action.errorText }\n        case \"SET-APP-INITIALIZED\":\n            return { ...state, isInitialized: action.status }\n        default:\n            return state\n    }\n}\n\nexport type AppActionsType = SetRequestStatusActionType\n    | SetErrorActionType | SetInitializedActionType\n\nexport type SetRequestStatusActionType = ReturnType<typeof setRequestStatus>\nexport type SetErrorActionType = ReturnType<typeof setError>\nexport type SetInitializedActionType = ReturnType<typeof setInitialized>\n\nexport const setRequestStatus = (status: RequestStatusType) => ({type: 'SET-REQUEST-STATUS', status} as const)\nexport const setError = (errorText: null | string) => ({type: 'SET-APP-ERROR', errorText} as const)\nexport const setInitialized = (status: boolean) => ({type: 'SET-APP-INITIALIZED', status} as const)","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {AppRootStateType} from \"../../app/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setError} from \"../../app/appReducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, null | string>( state => state.app.errorText )\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setError(null))\n    };\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error} 😠\n            </Alert>\n        </Snackbar>\n    );\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'api-key': '18e1d480-771d-4bcb-b6a1-86b6a255bc4b'\n    }\n})\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\nexport type ToDoListType = {\n    \"id\": string\n    \"title\": string\n    \"addedDate\": string\n    \"order\": number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: string[],\n    data: D\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\ntype AllTasksType = {\n    items: TaskType[]\n    totalCount: number\n    error: string\n}\nexport type UpdateDataType = {\n    title?: string\n    status?: TaskStatuses\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport type MeResponseType = {\n    id: string\n    email: string\n    login: string\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<ResponseType<MeResponseType>>('auth/me')\n    },\n    login(data: LoginParamsType) {\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data)\n    },\n    logout () {\n        return instance.delete<ResponseType>('auth/login')\n    },\n}\n\nexport const toDoListsAPI = {\n    getToDoLists() {\n        return instance.get<ToDoListType[]>('todo-lists')\n    },\n    createToDoList(title: string) {\n        return instance.post<ResponseType<{ item: ToDoListType }>>(`todo-lists`, {title})\n    },\n    deleteToDoList(tdlID: string) {\n        return instance.delete<ResponseType>(`todo-lists/${tdlID}`)\n    },\n    updateToDoList(tdlID: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${tdlID}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<AllTasksType>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, newTaskData: UpdateTaskType) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, newTaskData)\n    },\n    deleteTasks(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddNewItemPropsType = {\n    addNewItem: (title: string) => void\n}\n\nexport const AddNewItem = React.memo(function(props: AddNewItemPropsType) {\n    const [inputValue, setInputValue] = useState('')\n    const [error, setError] = useState('')\n\n    const onAddNewTaskHandler = useCallback(() => {\n        if (inputValue.trim() !== '') {\n            props.addNewItem(inputValue)\n        } else {\n            setError('This field is required!')\n        }\n        setInputValue('')\n    }, [props, inputValue])\n\n    const onInputChangeHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.currentTarget.value)\n        if (!!error) setError('')\n    }, [error])\n    const onInputKeyPressHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') onAddNewTaskHandler()\n    }, [onAddNewTaskHandler])\n\n    return (\n        <div className=\"listInputAria\">\n            <TextField variant=\"outlined\" size=\"small\"\n                       label=\"New item name\"\n                       title=\"Here you can add a new item to the list\"\n                       helperText={error} error={!!error}\n                       onKeyPress={onInputKeyPressHandler}\n                       onChange={onInputChangeHandler}\n                       value={inputValue}/>\n            <IconButton color=\"primary\" onClick={onAddNewTaskHandler}>\n                <AddBox />\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, FocusEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport {TaskStatuses} from \"../../api/todolists-api\";\n\nexport type EditableSpanPropsType = {\n    status: TaskStatuses\n    title: string\n    changeItemValue: (value: string) => void\n}\n\nexport const EditableSpan = React.memo(function(props: EditableSpanPropsType) {\n    const [edit, setEdit] = useState<boolean>(false)\n    const [value, setValue] = useState<string>('')\n\n    const onSetEditHandler = useCallback(() => {\n        setEdit(true)\n        setValue(props.title)\n    }, [setEdit, setValue, props])\n\n    const onFocusBlur = useCallback((event: FocusEvent<HTMLInputElement>) => {\n        props.changeItemValue(event.currentTarget.value)\n        setEdit(false)\n    }, [props, setEdit])\n\n    const onChangeValueHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        setValue(event.currentTarget.value)\n    }, [setValue])\n\n    const onEnterKeyHandler = useCallback((event: KeyboardEvent<HTMLInputElement>) => {\n        if(event.key === 'Enter') {\n            props.changeItemValue(value)\n            setEdit(false)\n        }\n    }, [props, setEdit, value])\n\n    return edit\n        ? <TextField onKeyPress={onEnterKeyHandler}\n                     onChange={onChangeValueHandler}\n                     onBlur={onFocusBlur} value={value}\n                     autoFocus\n                     type=\"text\"/>\n        : <span onDoubleClick={onSetEditHandler}\n                className={props.status === TaskStatuses.Completed\n                    ? 'doneTask'\n                    : 'inProcess'}>{props.title} </span>\n})","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\nimport { TaskWithLocalDataType } from \"../../tasks-reducer\";\n\n\nexport type TaskPropsType = {\n    removeTask: (toDoListID: string, id: string) => void\n    changeStatus: (toDoListID: string, id: string, status: TaskStatuses) => void\n    changeItemValue: (listID: string, itemID: string, value: string) => void\n    tdlID: string\n    task: TaskType & TaskWithLocalDataType\n}\n\nexport const Task = (props: TaskPropsType) => {\n    const onChangeItemHandler = useCallback((value: string) => {\n        props.changeItemValue(props.tdlID, props.task.id, value)\n    }, [props])\n    const onRemoveTaskHandler = useCallback(() => {\n        props.removeTask(props.tdlID, props.task.id)\n    }, [props])\n\n    const changeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        console.log(props.task.status, e.currentTarget.checked)\n        props.changeStatus(props.tdlID, props.task.id, e.currentTarget.checked\n            ? TaskStatuses.Completed\n            : TaskStatuses.New)\n    }, [props])\n\n    return (\n        <li className={`listItem ${props.task.entityStatus === 'loading' && 'entityRequest'}`} key={props.task.id}>\n            <Checkbox className=\"itemCheckBox\" color=\"primary\" onChange={changeStatusHandler}\n                      checked={props.task.status === TaskStatuses.Completed}/>\n            <EditableSpan changeItemValue={onChangeItemHandler} status={props.task.status} title={props.task.title}/>\n            <IconButton className={\"iconTrash\"} onClick={onRemoveTaskHandler}>\n                <Delete/>\n            </IconButton>\n        </li>\n    )\n}","import {ResponseType} from \"../api/todolists-api\";\nimport {setError, SetErrorActionType, setRequestStatus, SetRequestStatusActionType} from \"../app/appReducer\";\nimport {Dispatch} from \"redux\";\n\n\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setError(data.messages[0] ?? 'Some Error occurred!'))\n    dispatch(setRequestStatus('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setError(error.message ?? 'Some Error occurred!'))\n    dispatch(setRequestStatus('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetErrorActionType | SetRequestStatusActionType>\n\nexport const a = 0","import {TaskType, toDoListsAPI, UpdateDataType, UpdateTaskType} from \"../../api/todolists-api\";\nimport {AddToDoListACType, SetTDLsACType} from \"./todolists-reducer\";\nimport {AppRootStateType, ThunkType} from \"../../app/store\";\nimport {RequestStatusType, setError, setRequestStatus} from \"../../app/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState: LocalTasksType = {}\n\nexport type LocalTasksType = {\n    [key: string]: Array<TaskType & TaskWithLocalDataType>\n}\nexport type TaskWithLocalDataType = {\n    entityStatus: RequestStatusType\n}\n\nexport const tasksReducer = (state: LocalTasksType = initialState, action: TasksActionsType): LocalTasksType => {\n    switch (action.type) {\n        case \"SET-TO-DO-LISTS\":\n            const newState = {...state}\n            action.tdls.forEach(t => newState[t.id] = [])\n            return newState\n        case \"SET-TASKS\":\n            return {...state, [action.tdlID]: action.tasks.map(ts => ({...ts, entityStatus: 'idle'}))}\n        case 'REMOVE-TASK':\n            return {...state, [action.tdlID]: state[action.tdlID].filter(t => t.id !== action.id)}\n        case \"ADD-NEW-TASK\":\n            return {...state, [action.tdlID]: [{...action.taskData, entityStatus: 'idle'}, ...state[action.tdlID]]}\n        case \"CHANGE-TASK\":\n            return {\n                ...state, [action.tdlID]: state[action.tdlID].map(task =>\n                    (task.id === action.id ? {...task, ...action.newData} : task))\n            }\n        case \"ADD-TODOLIST\":\n            return {...state, [action.payload.id]: []}\n        case \"REMOVE-TODOLIST\": {\n            const newState = {...state}\n            delete newState[action.tdlID]\n            return newState\n        }\n        case \"SET-TASK-ENTITY-STATUS\":\n            return {\n                ...state, [action.tdlID]: state[action.tdlID].map(task =>\n                    (task.id === action.id ? {...task, entityStatus: action.status} : task))\n            }\n        default:\n            return state\n    }\n}\n\nexport type TasksActionsType = SetTasksACType | RemoveTaskACType | RemoveTodolistACType\n    | AddNewTaskACType | ChangeTaskACType\n    | SetTDLsACType | AddToDoListACType\n    | SetTaskEntityStatus\n\nexport type SetTasksACType = ReturnType<typeof setTasksAC>\nexport type RemoveTaskACType = ReturnType<typeof removeTaskAC>\nexport type AddNewTaskACType = ReturnType<typeof addNewTaskAC>\nexport type ChangeTaskACType = ReturnType<typeof changeTaskAC>\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\nexport type SetTaskEntityStatus = ReturnType<typeof setTaskEntityStatus>\n\nexport const setTaskEntityStatus = (tdlID: string, id: string, status: RequestStatusType) => (\n    { type: \"SET-TASK-ENTITY-STATUS\", status, tdlID, id } as const)\nexport const setTasksAC = (tdlID: string, tasks: TaskType[]) => (\n    {type: 'SET-TASKS', tdlID, tasks} as const\n)\nexport const removeTaskAC = (tdlID: string, id: string) => (\n    {type: 'REMOVE-TASK', tdlID, id} as const\n)\nexport const addNewTaskAC = (tdlID: string, taskData: TaskType) => (\n    {type: 'ADD-NEW-TASK', tdlID, taskData} as const\n)\nexport const changeTaskAC = (tdlID: string, id: string, newData: UpdateTaskType) => (\n    {type: 'CHANGE-TASK', tdlID, id, newData} as const\n)\nexport const removeTodolistAC = (tdlID: string) => ({type: 'REMOVE-TODOLIST', tdlID} as const)\n\nexport const setTasks = (tdlID: string): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    try {\n        const response = await toDoListsAPI.getTasks(tdlID)\n        if (response.data.error) {\n            dispatch(setRequestStatus('failed'))\n            dispatch(setError('Some error occurred'))\n        } else {\n            dispatch(setTasksAC(tdlID, response.data.items))\n            dispatch(setRequestStatus('succeeded'))\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    }\n}\nexport const createTask = (tdlID: string, title: string): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    try {\n        const response = await toDoListsAPI.createTask(tdlID, title)\n        if (response.data.resultCode !== 0) {\n            handleServerAppError(response.data, dispatch)\n        } else {\n            dispatch(addNewTaskAC(tdlID, response.data.data.item))\n            dispatch(setRequestStatus('succeeded'))\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    }\n}\nexport const deleteTask = (tdlID: string, taskID: string): ThunkType => async dispatch => {\n    dispatch(setTaskEntityStatus(tdlID, taskID, 'loading'))\n    dispatch(setRequestStatus('loading'))\n    try {\n        const response = await toDoListsAPI.deleteTasks(tdlID, taskID)\n        if (response.data.resultCode !== 0) {\n            handleServerAppError(response.data, dispatch)\n            dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\n        } else {\n            dispatch(removeTaskAC(tdlID, taskID))\n            dispatch(setRequestStatus('succeeded'))\n            dispatch(setTaskEntityStatus(tdlID, taskID, 'succeeded'))\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n        dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\n    }\n}\nexport const changeTask = (tdlID: string, taskID: string, newData: UpdateDataType): ThunkType =>\n    async (dispatch, getState: () => AppRootStateType) => {\n        dispatch(setTaskEntityStatus(tdlID, taskID, 'loading'))\n        dispatch(setRequestStatus('loading'))\n        let task = getState().tasks[tdlID].find(t => t.id === taskID)\n        if (!task) {\n            console.warn('There is no such taskID')\n            return\n        }\n        const currentTaskValues = {\n            title: task.title,\n            description: task.description,\n            priority: task.priority,\n            status: task.status,\n            deadline: task.deadline,\n            startDate: task.startDate,\n            ...newData\n        }\n        try {\n            const response = await toDoListsAPI.updateTask(tdlID, taskID, currentTaskValues)\n            if (response.data.resultCode !== 0) {\n                handleServerAppError(response.data, dispatch)\n                dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\n            } else {\n                dispatch(changeTaskAC(tdlID, taskID, currentTaskValues))\n                dispatch(setRequestStatus('succeeded'))\n                dispatch(setTaskEntityStatus(tdlID, taskID, 'succeeded'))\n            }\n        } catch (error) {\n            handleServerNetworkError(error, dispatch)\n            dispatch(setTaskEntityStatus(tdlID, taskID, 'failed'))\n        }\n    }\n","import React, {useCallback, useEffect} from \"react\";\nimport {AddNewItem} from \"../../../components/AddNewItem/AddNewItem\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\nimport {FilterType} from \"../todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {setTasks, TaskWithLocalDataType} from \"../tasks-reducer\";\nimport {RequestStatusType} from \"../../../app/appReducer\";\n\nexport type ToDoListPropsType = {\n    id: string\n    heading: string,\n    tasks: Array<TaskType & TaskWithLocalDataType>\n    filterStatus: FilterType\n    entityStatus: RequestStatusType\n    removeTask: (toDoListID: string, id: string) => void\n    filterTasks: (toDoListID: string, filterType: FilterType) => void\n    addNewTask: (toDoListID: string, title: string) => void\n    changeStatus: (toDoListID: string, id: string, status: TaskStatuses) => void\n    removeToDoList: (toDoListID: string) => void\n    changeItemValue: (listID: string, itemID: string, value: string) => void\n    onChangeListName: (listID: string, value: string) => void\n}\n\nexport const Todolist = React.memo((props: ToDoListPropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        dispatch(setTasks(props.id))\n    }, [dispatch, props.id])\n\n    let tasksForRender = props.tasks\n    if (props.filterStatus === 'active') tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\n    if (props.filterStatus === 'completed') tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\n\n    const tasks = tasksForRender.map(t => <Task removeTask={props.removeTask}\n                                                changeItemValue={props.changeItemValue}\n                                                changeStatus={props.changeStatus}\n                                                tdlID={props.id} task={t} key={t.id} />)\n\n    const removeToDoListHandler = useCallback(() => props.removeToDoList(props.id), [props])\n\n    const onAllFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'all'), [props])\n    const onActiveFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'active'), [props])\n    const onCompletedFilterTasksHandler = useCallback(() => props.filterTasks(props.id, 'completed'), [props])\n\n    const addNewTask = useCallback((title: string) => {\n        props.addNewTask(props.id, title)\n    }, [props])\n\n    const onChangeListName = useCallback((value: string) => {\n        props.onChangeListName(props.id, value)\n    }, [props])\n\n    return (\n        <Paper className={`toDoListsWrapper ${props.entityStatus === 'loading' && 'entityRequest'}`}>\n            <h3>\n                <EditableSpan status={TaskStatuses.New} title={props.heading} changeItemValue={onChangeListName} />\n                <IconButton onClick={removeToDoListHandler}>\n                    <Delete />\n                </IconButton>\n            </h3>\n            <AddNewItem addNewItem={addNewTask}/>\n            <ul className=\"listWrapper\">\n                {tasks}\n            </ul>\n            <div>\n                <Button style={{margin: '0 5px'}} color=\"secondary\" disabled={props.filterStatus === 'all'} variant={props.filterStatus === 'all' ? 'outlined' : 'contained'} onClick={ onAllFilterTasksHandler }>All</Button>\n                <Button style={{margin: '0 5px'}} color=\"primary\" disabled={props.filterStatus === 'active'} variant={props.filterStatus === 'active' ? 'outlined' : 'contained'} onClick={ onActiveFilterTasksHandler }>Active</Button>\n                <Button style={{margin: '0 5px'}} color=\"primary\" disabled={props.filterStatus === 'completed'} variant={props.filterStatus === 'completed' ? 'outlined' : 'contained'} onClick={ onCompletedFilterTasksHandler }>Completed</Button>\n            </div>\n        </Paper>\n    )\n});\n\n","import {toDoListsAPI, ToDoListType} from \"../../api/todolists-api\";\nimport {ThunkType} from \"../../app/store\";\nimport {RequestStatusType, setError, setRequestStatus} from \"../../app/appReducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nexport type ToDoListDomainType = {\n    entityStatus: RequestStatusType\n    status: FilterType\n}\nexport type ToDoListWithDomainType = ToDoListType & ToDoListDomainType\nconst initialState: Array<ToDoListWithDomainType> = []\n\nexport const toDoListReducer = (state: Array<ToDoListWithDomainType> = initialState,\n                                action: ToDoListActionsType): Array<ToDoListWithDomainType> => {\n    switch (action.type) {\n        case \"SET-ENTITY-STATUS\":\n            return state.map(tdl => tdl.id === action.tdlID ? {...tdl, entityStatus: action.status} : tdl)\n        case \"SET-TO-DO-LISTS\":\n            return action.tdls.map(tdl => ({...tdl, status: 'all', entityStatus: 'idle'}))\n        case 'REMOVE-TODOLIST':\n            return state.filter(tdl => tdl.id !== action.tdlID)\n        case 'ADD-TODOLIST':\n            return [ {...action.payload, status: 'all', entityStatus: 'idle'}, ...state ]\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tdl => tdl.id === action.id ? {...tdl, title: action.title} : tdl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tdl => tdl.id === action.id ? {...tdl, status: action.status} : tdl)\n        default:\n            return state\n    }\n}\n\n//actions\nexport const setEntityStatus = (tdlID: string, status: RequestStatusType) => (\n    { type: \"SET-ENTITY-STATUS\", status, tdlID } as const)\nexport const setTDLsAC = (tdls: Array<ToDoListType>) => ({type: \"SET-TO-DO-LISTS\", tdls} as const)\nexport const removeToDoListAC = (tdlID: string) => ({type: 'REMOVE-TODOLIST', tdlID} as const)\nexport const addToDoListAC = (payload: ToDoListType) => ({type: 'ADD-TODOLIST', payload,} as const)\nexport const changeToDoListFilterAC = (id: string, status: FilterType) => {\n    return {type: 'CHANGE-TODOLIST-FILTER', id, status} as const\n}\nexport const changeToDoListTitleAC = (id: string, title: string) => {\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title} as const\n}\n\n//types\nexport type ToDoListActionsType = SetTDLsACType | RemoveToDoListACType\n    | AddToDoListACType | ChangeToDoListFilterACType | ChangeToDoListTitleACType\n    | SetEntityStatusType\n\nexport type FilterType = 'all' | 'active' | 'completed'\nexport type SetEntityStatusType = ReturnType<typeof setEntityStatus>\nexport type SetTDLsACType = ReturnType<typeof setTDLsAC>\nexport type RemoveToDoListACType = ReturnType<typeof removeToDoListAC>\nexport type AddToDoListACType = ReturnType<typeof addToDoListAC>\nexport type ChangeToDoListFilterACType = ReturnType<typeof changeToDoListFilterAC>\nexport type ChangeToDoListTitleACType = ReturnType<typeof changeToDoListTitleAC>\n\n\n//thunks\nexport const setToDoListsTC = (): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    try {\n        const response = await toDoListsAPI.getToDoLists()\n        dispatch(setTDLsAC(response.data))\n        dispatch(setRequestStatus('succeeded'))\n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    } finally {\n        dispatch(setRequestStatus('succeeded'))\n    }\n}\nexport const createToDoList = (title: string): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    try {\n        const response = await toDoListsAPI.createToDoList(title)\n        if (response.data.resultCode !== 0) {\n            handleServerAppError(response.data, dispatch)\n        } else {\n            dispatch(addToDoListAC(response.data.data.item))\n            dispatch(setRequestStatus('succeeded'))\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch)\n    } finally {\n        dispatch(setRequestStatus('succeeded'))\n    }\n}\n\n\nexport const deleteToDoList = (id: string): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    dispatch(setEntityStatus(id, 'loading'))\n    try {\n        const response = await toDoListsAPI.deleteToDoList(id)\n        if (response.data.resultCode !== 0) {\n            handleServerAppError(response.data, dispatch)\n        } else {\n            dispatch(removeToDoListAC(id))\n            dispatch(setRequestStatus('succeeded'))\n            dispatch(setEntityStatus(id, 'succeeded'))\n        }\n    } catch (error) {\n        dispatch(setError(error.message ?? 'Some Error occurred!'))\n        dispatch(setRequestStatus('failed'))\n        dispatch(setEntityStatus(id, 'failed'))\n    } finally {\n        dispatch(setRequestStatus('succeeded'))\n    }\n}\nexport const updateToDoList = (id: string, title: string): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    dispatch(setEntityStatus(id, 'loading'))\n    try {\n        const response = await toDoListsAPI.updateToDoList(id, title)\n        if (response.data.resultCode !== 0) {\n            handleServerAppError(response.data, dispatch)\n        } else {\n            dispatch(changeToDoListTitleAC(id, title))\n            dispatch(setEntityStatus(id, 'succeeded'))\n            dispatch(setRequestStatus('succeeded'))\n        }\n    } catch (error) {\n        dispatch(setError(error.message ?? 'Some Error occurred!'))\n        dispatch(setRequestStatus('failed'))\n        dispatch(setEntityStatus(id, 'failed'))\n    } finally {\n        dispatch(setRequestStatus('succeeded'))\n    }\n}","import React, {useCallback, useEffect} from 'react';\nimport {Todolist} from \"./ToDoList/Todolist\";\nimport {AddNewItem} from \"../../components/AddNewItem/AddNewItem\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {\n    changeToDoListFilterAC,\n    createToDoList,\n    deleteToDoList,\n    FilterType,\n    setToDoListsTC,\n    ToDoListDomainType,\n    updateToDoList\n} from \"./todolists-reducer\";\nimport {changeTask, createTask, deleteTask, LocalTasksType,} from \"./tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {TaskStatuses, ToDoListType} from \"../../api/todolists-api\";\nimport {RequestStatusType} from \"../../app/appReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {initializeAppTC} from \"../Login/auth-reducer\";\n\nexport const ToDoListsAll = React.memo(function() {\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListType & ToDoListDomainType>>( state => state.toDoLists)\n    const tasks = useSelector<AppRootStateType, LocalTasksType>( state => state.tasks)\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>( state => state.app.requestStatus)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.login.isLoggedIn )\n\n    const dispatch = useDispatch();\n\n    useEffect( () => {\n        if (!isLoggedIn) return\n        dispatch(setToDoListsTC())\n    }, [dispatch])\n\n    const removeToDoListHandler = useCallback((toDoLostID: string) => {\n        dispatch(deleteToDoList(toDoLostID))\n    }, [dispatch, requestStatus])\n\n    const onChangeListNameHandler = useCallback((listID: string, value: string) => {\n        dispatch(updateToDoList(listID, value))\n    }, [dispatch])\n\n    const onChangeItemValueHandler = useCallback((listID: string, itemID: string, title: string) => {\n        dispatch(changeTask(listID, itemID, {title}))\n    }, [dispatch])\n\n    const filterTasksHandler = useCallback((toDoListID: string, value: FilterType) => {\n        dispatch(changeToDoListFilterAC(toDoListID, value))\n    }, [dispatch])\n\n    const removeTaskHandler = useCallback((toDoListID: string, taskID: string) => {\n        dispatch(deleteTask(toDoListID, taskID))\n    }, [dispatch])\n\n    const addNewTaskHandler = useCallback((toDoListID: string, title: string) => {\n        dispatch(createTask(toDoListID, title))\n    }, [dispatch])\n\n    const changeStatusHandler = useCallback((toDoListID: string, id: string, status: TaskStatuses) => {\n        dispatch(changeTask(toDoListID, id, {status}))\n    }, [dispatch])\n\n    const addNewListHandler = useCallback((name: string) => {\n        dispatch(createToDoList(name))\n    }, [dispatch])\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return (\n            <>\n                <div className=\"addNewList\">\n                    <Paper style={{padding: \"15px\" }}>\n                        <h2 style={{margin: 0}}>Add New List</h2>\n                        <AddNewItem addNewItem={addNewListHandler}/>\n                    </Paper>\n                </div>\n                <Grid container spacing={2}>\n                    {toDoLists.map(tdl => {\n                        return (\n                            <Grid item  key={tdl.id}>\n                                <Todolist id={tdl.id}\n                                          entityStatus={tdl.entityStatus}\n                                          heading={tdl.title}\n                                          tasks={tasks[tdl.id]}\n                                          removeTask={removeTaskHandler}\n                                          filterTasks={filterTasksHandler}\n                                          addNewTask={addNewTaskHandler}\n                                          changeStatus={changeStatusHandler}\n                                          filterStatus={tdl.status}\n                                          removeToDoList={removeToDoListHandler}\n                                          changeItemValue={onChangeItemValueHandler}\n                                          onChangeListName={onChangeListNameHandler}\n                                />\n                            </Grid>\n                        )\n                    })}\n                </Grid>\n            </>\n    );\n})\n","import {setInitialized, setRequestStatus} from \"../../app/appReducer\";\nimport {ThunkType} from \"../../app/store\";\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    try {\n        const response = await authAPI.login(data)\n        if (response.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true))\n        } else {\n            handleServerAppError(response.data, dispatch)\n        }\n    } catch (error) {\n        handleServerNetworkError({message: error.message}, dispatch)\n    } finally {\n        dispatch(setRequestStatus('succeeded'))\n    }\n}\nexport const initializeAppTC = (): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n    try {\n       const response = await authAPI.me()\n       if (response.data.resultCode === 0) {\n           dispatch(setIsLoggedInAC(true));\n       } else {\n           handleServerAppError(response.data, dispatch)\n       }\n   } catch (error) {\n       handleServerNetworkError({message: error.message}, dispatch)\n   } finally {\n       dispatch(setRequestStatus('succeeded'))\n        dispatch(setInitialized(true))\n   }\n}\nexport const logoutTC = (): ThunkType => async dispatch => {\n    dispatch(setRequestStatus('loading'))\n        try {\n            const response = await authAPI.logout()\n            if (response.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setRequestStatus('succeeded'))\n            } else {\n                handleServerAppError(response.data, dispatch)\n            }\n        } catch(error) {\n            handleServerNetworkError(error, dispatch)\n        }  finally {\n            dispatch(setRequestStatus('succeeded'))\n        }\n}\n\n\n\n// types\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC>","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const Login = () => {\n\n    type FormikErrorType = {\n        email?: string\n        password?: string\n        rememberMe?: boolean\n    }\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: true\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Email is required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'The password field is required'\n            } else if (values.password.length < 4) {\n                errors.password = 'The password should contain minimum 3 characters'\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\" margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                                   onBlur={formik.handleBlur}\n                        />\n                        {formik.errors.email && formik.touched.email &&\n                        <div style={{color: 'red', fontSize: '10px'}}>{formik.errors.email}</div>}\n                        <TextField type=\"password\" label=\"Password\"\n                                   margin=\"normal\" {...formik.getFieldProps('password')}\n                                   onBlur={formik.handleBlur}\n                        />\n                        {formik.errors.password && formik.touched.password &&\n                        <div style={{color: 'red', fontSize: '10px'}}>{formik.errors.password}</div>}\n                        <FormControlLabel label={'Remember me'}\n                                          control={<Checkbox/>} {...formik.getFieldProps('rememberMe')}\n                                          checked={formik.values.rememberMe}/>\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {RequestStatusType} from \"./appReducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {ToDoListsAll} from \"../features/ToDoListsAll/ToDoListsAll\";\nimport {Login} from \"../features/Login/Login\";\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\n\nconst AppWithUseReducer = React.memo(function() {\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>( state => state.app.requestStatus)\n    const isInitialized = useSelector<AppRootStateType, boolean>( state => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>( state => state.login.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect( () => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n\n    return (\n        <div>\n            <div className={'headerWrapper'}>\n                <AppBar position=\"static\">\n                    <Toolbar variant=\"dense\">\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu />\n                        </IconButton>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Todo\n                        </Typography>\n                        {isLoggedIn && <Button onClick={() => dispatch(logoutTC())} style={{color: \"white\", fontWeight: 'bold', marginLeft: 'auto'}}>Log out</Button>}\n                    </Toolbar>\n                </AppBar>\n                <div className={'headerPreloader'}>\n                    { requestStatus === 'loading' && <LinearProgress/>}\n                </div>\n            </div>\n            <Container>\n                <Switch>\n                    <Route path={'/'} exact render={ () =>  <ToDoListsAll />} />\n                    <Route path={'/login'} render={ () =>  <Login />} />\n                    <Route path={'/404'} render={ () =>  <h1><p>404:</p> Page Not Found</h1>} />\n                    <Redirect from={'*'} to={'/404'} />\n                </Switch>\n            </Container>\n            <ErrorSnackbar />\n        </div>\n    );\n})\n\nexport default AppWithUseReducer;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {ToDoListActionsType, toDoListReducer} from \"../features/ToDoListsAll/todolists-reducer\";\nimport {TasksActionsType, tasksReducer} from \"../features/ToDoListsAll/tasks-reducer\";\nimport thunk, {ThunkAction} from \"redux-thunk\";\nimport {AppActionsType, appReducer} from \"./appReducer\";\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\n\nconst rootReducer = combineReducers({\n    toDoLists: toDoListReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    login: authReducer,\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport type AppRootActionType = ToDoListActionsType | TasksActionsType\n    | AppActionsType | AuthActionsType\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, AppRootActionType>\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(<Provider store={store}>\n    <HashRouter>\n        <App />\n    </HashRouter>\n</Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}